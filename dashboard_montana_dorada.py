# -*- coding: utf-8 -*-
"""dashboard_montana_dorada

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LqnoKiQ-khi95YU_l67W-ySu4QIFTZq-
"""
# dashboard_montana_dorada.py
# dashboard_montana_dorada.py
# dashboard_montana_dorada.py
# dashboard_montana_dorada.py
# dashboard_montana_dorada.py
import pandas as pd
import streamlit as st
import plotly.express as px

# --- Configuraci√≥n ---
st.set_page_config(page_title="Dashboard Monta√±a Dorada", layout="wide")
st.title("üç∫ Dashboard SCOR - Cervecer√≠a Monta√±a Dorada")

# --- Carga de archivo ---
st.sidebar.header("Carga de Datos")
uploaded_file = st.sidebar.file_uploader("Sube el archivo Excel", type=["xlsx"])

if uploaded_file:
    # Extraer la tabla de pedidos desde fila 9 en adelante
    df = pd.read_excel(uploaded_file, sheet_name="DATASET", skiprows=8)

    # Renombrar columnas
    df.columns = [
        "Fecha", "N√∫mero Pedido", "Estado Pedido", "Tiempo Entrega (d√≠as)",
        "Cantidad Pedida", "Cantidad Devuelta", "Costo Total (COP)",
        "Proveedor", "Ubicaci√≥n", "Fecha Comprometida",
        "Fecha Real Entrega", "Costo Transporte (COP)"
    ]

    # ‚úÖ Limpiar datos: quitar filas extra y totales
    df = df[pd.to_numeric(df["N√∫mero Pedido"], errors="coerce").notna()]
    df["N√∫mero Pedido"] = df["N√∫mero Pedido"].astype(int)
    df = df[df["Estado Pedido"].isin(["Entregado", "Pendiente", "Cancelado"])]

    # --- Tabla de tarifas de transporte ---
    tarifas = {
        "Local": {"normal": 400, "devolucion": 550},
        "Nacional": {"normal": 600, "devolucion": 700},
        "Internacional": {"normal": 900, "devolucion": 1000},
    }

    # Calcular costo transporte din√°mico seg√∫n ubicaci√≥n y devoluciones
    def calcular_costo_transporte(row):
        if row["Ubicaci√≥n"] not in tarifas:
            return 0
        normal = (row["Cantidad Pedida"] - row["Cantidad Devuelta"]) * tarifas[row["Ubicaci√≥n"]]["normal"]
        devol = row["Cantidad Devuelta"] * tarifas[row["Ubicaci√≥n"]]["devolucion"]
        return normal + devol

    df["Costo Transporte (COP)"] = df.apply(calcular_costo_transporte, axis=1)

    # --- KPIs b√°sicos ---
    total_pedidos = len(df)
    entregados = len(df[df["Estado Pedido"] == "Entregado"])
    pendientes = len(df[df["Estado Pedido"] == "Pendiente"])
    cancelados = len(df[df["Estado Pedido"] == "Cancelado"])

    # Nivel de servicio (entregados a tiempo / entregados)
    df["Cumpli√≥ Plazo"] = df.apply(
        lambda x: pd.notna(x["Fecha Real Entrega"]) and x["Fecha Real Entrega"] <= x["Fecha Comprometida"],
        axis=1
    )
    pedidos_a_tiempo = df["Cumpli√≥ Plazo"].sum()
    nivel_servicio = pedidos_a_tiempo / max(entregados, 1) * 100

    # Tiempo promedio y variabilidad
    tiempo_promedio = df.loc[df["Estado Pedido"] == "Entregado", "Tiempo Entrega (d√≠as)"].mean()
    tiempo_std = df.loc[df["Estado Pedido"] == "Entregado", "Tiempo Entrega (d√≠as)"].std()

    # Costos
    costo_total = df["Costo Total (COP)"].sum()
    costo_promedio = df["Costo Total (COP)"].mean()
    costo_transporte_total = df["Costo Transporte (COP)"].sum()
    costo_transporte_prom = df["Costo Transporte (COP)"].mean()

    # Devoluciones
    total_pedidas = df["Cantidad Pedida"].sum()
    total_dev = df["Cantidad Devuelta"].sum()
    pct_devoluciones = (total_dev / total_pedidas) * 100 if total_pedidas > 0 else 0

    # --- KPIs adicionales (tabla SCOR) ---
    # 1. Precisi√≥n de la Planificaci√≥n (%)
    precision_planif = pedidos_a_tiempo / total_pedidos * 100 if total_pedidos > 0 else 0

    # 2. Tasa de Entrega Completa (%)
    total_entregada = (df["Cantidad Pedida"] - df["Cantidad Devuelta"]).sum()
    tasa_entrega_completa = total_entregada / total_pedidas * 100 if total_pedidas > 0 else 0

    # 3. Costo de Devoluci√≥n por Pedido ($)
    costo_devoluciones = df.apply(
        lambda x: x["Cantidad Devuelta"] * tarifas[x["Ubicaci√≥n"]]["devolucion"] if x["Ubicaci√≥n"] in tarifas else 0,
        axis=1
    ).sum()
    pedidos_con_devol = len(df[df["Cantidad Devuelta"] > 0])
    costo_devolucion_pedido = costo_devoluciones / max(pedidos_con_devol, 1)

    # --- Vista previa ---
    st.subheader(f"üìë Vista previa de los pedidos (Total: {len(df)} registros)")
    st.dataframe(df.head())

    # --- Mostrar KPIs principales ---
    st.markdown("### üîë Indicadores Clave")
    k1, k2, k3, k4 = st.columns(4)
    k1.metric("Total Pedidos", f"{total_pedidos}")
    k2.metric("Nivel de servicio (%)", f"{nivel_servicio:.1f}%")
    k3.metric("Tiempo promedio entrega (d√≠as)", f"{tiempo_promedio:.1f}")
    k4.metric("Costo total (COP)", f"${costo_total:,.0f}")

    with st.expander("‚ÑπÔ∏è Explicaci√≥n - Indicadores Clave"):
        st.write("""
        - **Nivel de servicio (%):** Pedidos entregados a tiempo sobre pedidos entregados.
        - **Tiempo promedio entrega (d√≠as):** Media de d√≠as que tardan los pedidos en ser entregados.
        - **Costo total (COP):** Suma de todos los costos asociados a los pedidos.
        """)

    st.markdown("### üìå KPIs adicionales")
    k5, k6, k7, k8 = st.columns(4)
    k5.metric("% Cancelados", f"{(cancelados/total_pedidos)*100:.1f}%")
    k6.metric("% Devoluciones", f"{pct_devoluciones:.1f}%")
    k7.metric("Costo transporte promedio", f"${costo_transporte_prom:,.0f}")
    k8.metric("Tasa de entrega completa (%)", f"{tasa_entrega_completa:.1f}%")

    with st.expander("‚ÑπÔ∏è Explicaci√≥n - KPIs adicionales"):
        st.write("""
        - **% Cancelados:** Pedidos cancelados sobre total de pedidos.
        - **% Devoluciones:** Cantidad devuelta sobre cantidad pedida.
        - **Costo transporte promedio:** Costo de transporte / n√∫mero de pedidos.
        - **Tasa de entrega completa (%):** Cantidad entregada sobre cantidad pedida.
        """)

    st.markdown("### üìä KPIs SCOR a√±adidos")
    k9, k10, k11 = st.columns(3)
    k9.metric("Precisi√≥n de la planificaci√≥n (%)", f"{precision_planif:.1f}%")
    k10.metric("Costo de devoluci√≥n por pedido ($)", f"${costo_devolucion_pedido:,.0f}")
    k11.metric("Pedidos con devoluci√≥n", f"{pedidos_con_devol}")

    with st.expander("‚ÑπÔ∏è Explicaci√≥n - KPIs SCOR"):
        st.write("""
        - **Precisi√≥n de la planificaci√≥n (%):** Pedidos entregados a tiempo sobre el total de pedidos.
        - **Costo de devoluci√≥n por pedido ($):** Costo asociado a devoluciones dividido entre pedidos con devoluci√≥n.
        - **Pedidos con devoluci√≥n:** N√∫mero de pedidos que presentaron devoluciones.
        """)

    # --- Visualizaciones ---
    st.markdown("### üì¶ Pedidos por Proveedor")
    pedidos_prov = df["Proveedor"].value_counts().reset_index()
    pedidos_prov.columns = ["Proveedor", "Pedidos"]
    fig1 = px.bar(pedidos_prov, x="Proveedor", y="Pedidos", color="Proveedor", text="Pedidos")
    st.plotly_chart(fig1, use_container_width=True)

    st.markdown("### ‚è±Ô∏è Distribuci√≥n de tiempos de entrega")
    fig2 = px.histogram(df[df["Estado Pedido"] == "Entregado"], x="Tiempo Entrega (d√≠as)", nbins=10)
    st.plotly_chart(fig2, use_container_width=True)

    st.markdown("### üí≤ Costo por proveedor")
    costo_prov = df.groupby("Proveedor")["Costo Total (COP)"].sum().reset_index()
    fig3 = px.bar(
        costo_prov,
        x="Proveedor",
        y="Costo Total (COP)",
        color="Proveedor",
        text=costo_prov["Costo Total (COP)"].map(lambda x: f"${x:,.0f}")
    )
    fig3.update_layout(yaxis_title="Costo Total (COP)")
    st.plotly_chart(fig3, use_container_width=True)

    st.markdown("### üìç Estado de los pedidos")
    estado_counts = df["Estado Pedido"].value_counts().reset_index()
    estado_counts.columns = ["Estado", "Cantidad"]
    fig4 = px.bar(estado_counts, x="Estado", y="Cantidad", color="Estado", text="Cantidad")
    st.plotly_chart(fig4, use_container_width=True)

    st.markdown("### üìâ % Devoluciones por proveedor")
    dev_prov = df.groupby("Proveedor")[["Cantidad Pedida", "Cantidad Devuelta"]].sum().reset_index()
    dev_prov["% Devoluciones"] = (dev_prov["Cantidad Devuelta"] / dev_prov["Cantidad Pedida"]) * 100
    dev_prov["% Devoluciones"] = dev_prov["% Devoluciones"].astype(float).round(2)

    fig5 = px.bar(
        dev_prov,
        x="Proveedor",
        y="% Devoluciones",
        color="Proveedor",
        text=dev_prov["% Devoluciones"].map(lambda x: f"{x:.2f}%")
    )
    st.plotly_chart(fig5, use_container_width=True)

    st.markdown("### üìä Variabilidad en tiempos de entrega por proveedor")
    fig6 = px.box(df[df["Estado Pedido"] == "Entregado"], x="Proveedor", y="Tiempo Entrega (d√≠as)", color="Proveedor")
    st.plotly_chart(fig6, use_container_width=True)

else:
    st.info("üëÜ Carga el archivo Excel en la barra lateral para comenzar.")
